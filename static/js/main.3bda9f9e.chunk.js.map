{"version":3,"sources":["Heading.js","ButtonsPanel.js","CounterDisplay.js","Step.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","className","classValue","text","ButtonsPanel","onClick","changeValue","stepChange","stepValue","resetValue","CounterDisplay","value","Step","type","onChange","changeButtonValue","Counter","addOne","setState","prevState","counterValue","reset","resetBool","parseInt","initValue","updateButtonValue","event","target","updateCounter","state","isNaN","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAOeA,G,YAJC,SAAAC,GAChB,OAAO,wBAAIC,UAAWD,EAAME,YAAaF,EAAMG,Q,mCCWhCC,EAZM,SAACJ,GAClB,OACI,yBAAKC,UAAU,iBAAf,8BAEI,4BAAQI,QAASL,EAAMM,aAAvB,SACA,4BAAQD,QAASL,EAAMO,YAAvB,OAAwCP,EAAMQ,WAC9C,4BAAQH,QAAS,kBAAML,EAAMS,YAAW,KAAxC,SACA,4BAAQJ,QAAS,kBAAML,EAAMS,YAAW,KAAxC,WCHGC,EAJQ,SAAAV,GACvB,OAAO,8CAAmB,8BAAOA,EAAMW,SCQxBC,EAVF,SAAAZ,GACT,OACI,yBAAKC,UAAU,kBACX,uBAAGA,UAAU,QAAb,QACA,2BAAOY,KAAK,SAASF,MAAOX,EAAMQ,UAAWM,SAAUd,EAAMe,sBCqD1DC,E,YArDX,WAAYhB,GAAQ,IAAD,uBACf,4CAAMA,KAYViB,OAAS,WACL,EAAKC,UAAS,SAAAC,GACV,MAAQ,CAAEC,aAAcD,EAAUC,aAAe,OAftC,EAmBnBC,MAAQ,SAAAC,GACAA,EACA,EAAKJ,SAAS,CAAEE,aAAc,IAG9B,EAAKF,SAAS,CAAEE,aAAcG,SAAS,EAAKvB,MAAMwB,cAxBvC,EA4BnBC,kBAAoB,SAACC,GACjB,EAAKR,SAAS,CAAEV,UAAWkB,EAAMC,OAAOhB,SA7BzB,EAgCnBiB,cAAgB,WACZ,EAAKV,UAAS,SAAAC,GACV,MAAQ,CAAEC,aAAcG,SAASJ,EAAUC,cAAgBG,SAAS,EAAKM,MAAMrB,gBAhCnF,IAAIgB,EAAY,EAFD,OAIVM,MAAM,EAAK9B,MAAMwB,aAClBA,EAAYD,SAAS,EAAKvB,MAAMwB,YAEpC,EAAKK,MAAQ,CACTT,aAAcI,EACdhB,UANW,GAHA,E,sEAuCf,OACI,yBAAKP,UAAU,WAEX,kBAAC,EAAD,CAAgBU,MAAOoB,KAAKF,MAAMT,eAElC,kBAAC,EAAD,CAAcd,YAAayB,KAAKd,OAAQR,WAAYsB,KAAKV,MAAOb,UAAWuB,KAAKF,MAAMrB,UAAWD,WAAYwB,KAAKH,gBAElH,kBAAC,EAAD,CAAMpB,UAAWuB,KAAKF,MAAMrB,UAAWO,kBAAmBgB,KAAKN,yB,GA/CzDO,aCWPC,MAXf,WACE,OACE,yBAAKhC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAASE,KAAK,kBAAkBD,WAAW,kBAE3C,kBAAC,EAAD,CAASsB,UAAW,OCCNU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3bda9f9e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Heading = props => {\r\nreturn <h1 className={props.classValue}>{props.text}</h1>;\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\n\r\nconst ButtonsPanel = (props) => {\r\n    return (\r\n        <div className='buttons-panel'>\r\n            To jest panel przycisk√≥w\r\n            <button onClick={props.changeValue}>Add 1</button>\r\n            <button onClick={props.stepChange}>Add {props.stepValue}</button>\r\n            <button onClick={() => props.resetValue(true)}>Set 0</button>\r\n            <button onClick={() => props.resetValue(false)}>Reset</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonsPanel;","import React from 'react';\r\n\r\n\r\nconst CounterDisplay = props => {\r\nreturn <h2>Stan licznika: <span>{props.value}</span></h2>;\r\n}\r\n\r\nexport default CounterDisplay;","import React from 'react';\r\n\r\nconst Step = props => {\r\n    return (\r\n        <div className='step-container'>\r\n            <p className='step'>Krok</p>\r\n            <input type=\"number\" value={props.stepValue} onChange={props.changeButtonValue} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Step;","import React, { Component } from 'react';\r\nimport ButtonsPanel from './ButtonsPanel';\r\nimport CounterDisplay from './CounterDisplay';\r\nimport Step from './Step';\r\n\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let initValue = 0;\r\n        let initStep = 1;\r\n        if (!isNaN(this.props.initValue)) {\r\n            initValue = parseInt(this.props.initValue);\r\n        }\r\n        this.state = {\r\n            counterValue: initValue,\r\n            stepValue: initStep\r\n        };\r\n    }\r\n\r\n    addOne = () => {\r\n        this.setState(prevState => {\r\n            return ({ counterValue: prevState.counterValue + 1 });\r\n        });\r\n    }\r\n\r\n    reset = resetBool => {\r\n        if (resetBool) {\r\n            this.setState({ counterValue: 0 })\r\n        }\r\n        else {\r\n            this.setState({ counterValue: parseInt(this.props.initValue) });\r\n        }\r\n    }\r\n\r\n    updateButtonValue = (event) => {\r\n        this.setState({ stepValue: event.target.value });\r\n    }\r\n\r\n    updateCounter = () => {\r\n        this.setState(prevState => {\r\n            return ({ counterValue: parseInt(prevState.counterValue) + parseInt(this.state.stepValue) });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='counter'>\r\n\r\n                <CounterDisplay value={this.state.counterValue} />\r\n\r\n                <ButtonsPanel changeValue={this.addOne} resetValue={this.reset} stepValue={this.state.stepValue} stepChange={this.updateCounter} />\r\n\r\n                <Step stepValue={this.state.stepValue} changeButtonValue={this.updateButtonValue} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport './App.css';\nimport Heading from './Heading';\nimport Counter from './Counter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Heading text='Licznik w React' classValue='main-heading' />\n      </header>\n      <Counter initValue={99} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}